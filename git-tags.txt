                                GIT TAGS    
===================================================================

Tags are pointers that refer to paticular points in Git history. We can mark a particular moment in time with a tag. Tags are most often used to mark version releases in projects.

Think of tags as branch references that do NOT CHANGE. Once a tag is created, it always refers to the same commit. It's just a label for a commit.

                            THE TWO TAG TYPES    
===================================================================

There are two types of Git tags we can use: lightweight and annotated tags.

  - lightweight tags...are lightweight. They are just a name/label that points to a particular commit.
  - annotated tags store extra meta data including the author's name and e-mail, the date, and tagging message (like a commit message).

                                SEMANTIC VERSIONING    
===================================================================

The semantic versioning spec outlines a standaradized versioning system for software releases. It provides a consistent way for developers to give meaning to their software releases (how big of a change is this release??)

Versions consists of three numbers separated by periods.

2.4.1  => 2(major release).4(minor release).1(patch release)

VIEWING TAGS:
     - git tag will print a list of all tags in the current repository.

     git tag

     - we can search for tags that match a particular pattern by using git tag -l and then passing in a wildcard pattern. For example:

        git tag -l "*beta*" will print a list of tags that include "beta" in their code...
    

                            CHECKING OUT TAGS    
===================================================================

Tags view th state of a repo at a particular tag, we can use 
   
      git checkout <tag>. This puts us in detached HEAD!

                CHECKING DIFFERENCE BETWEEN TWO COMMITS (TAGS)    
===================================================================

git diff <tag1> <tag2>, for example:
git diff v17.0.0 v17.0.1
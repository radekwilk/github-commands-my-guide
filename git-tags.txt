                                GIT TAGS    
===================================================================

Tags are pointers that refer to paticular points in Git history. We can mark a particular moment in time with a tag. Tags are most often used to mark version releases in projects.

Think of tags as branch references that do NOT CHANGE. Once a tag is created, it always refers to the same commit. It's just a label for a commit.

                            THE TWO TAG TYPES    
===================================================================

There are two types of Git tags we can use: lightweight and annotated tags.

  - lightweight tags...are lightweight. They are just a name/label that points to a particular commit.
  - annotated tags store extra meta data including the author's name and e-mail, the date, and tagging message (like a commit message).

                                SEMANTIC VERSIONING    
===================================================================

The semantic versioning spec outlines a standaradized versioning system for software releases. It provides a consistent way for developers to give meaning to their software releases (how big of a change is this release??)

Versions consists of three numbers separated by periods.

2.4.1  => 2(major release).4(minor release).1(patch release)

VIEWING TAGS:
     - git tag will print a list of all tags in the current repository.

     git tag

     - we can search for tags that match a particular pattern by using git tag -l and then passing in a wildcard pattern. For example:

        git tag -l "*beta*" will print a list of tags that include "beta" in their code...
    

                            CHECKING OUT TAGS    
===================================================================

Tags view th state of a repo at a particular tag, we can use 
   
      git checkout <tag>. This puts us in detached HEAD!

                CHECKING DIFFERENCE BETWEEN TWO COMMITS (TAGS)    
===================================================================

git diff <tag1> <tag2>, for example:
git diff v17.0.0 v17.0.1


                             CREATING LIGHTWEIGHT TAGS    
===================================================================

To create a lightweight tag, use git tag <tagname>
By default, Git wil create the tag reffering to the commit the HEAD is referencing.


                            CREATING ANNOTATED TAGS    
===================================================================

We use git tag -a to create a new annotated tag. Git will then open your default text editor and prompt you for additional information. 
Similar to git commit, we can also use the -m option to pass a message directly and forgo the opening of the text editor:

       git tag -a <tagname>, for example git tag v17.1.0

If we and to see info about any particular tag, we can use this command:

       git show <tagname>, for example: git show v17.0.0


                                TAGGING PREVIUOS COMMITS    
===================================================================

So far we've seen how to tag the commit that HEAD refernces. We can also tag an older commit by providing the commit hash:
    
          git tag -a <tagname><commit-hash>

                                    FORCING TAGS    
===================================================================

Git will yell at us if we try to reuse a tag that is already referring to a commit. If we use the -f option, we can FORCE our tag through.

    git tag -f <tagname>

    or we can use -f to move this tag to another commit, example:
     
    git tag -f <tagname><commit-hash>


                                DELATING TAGS    
===================================================================

To delate a tag, use git tag -d <tagname>


                                PUSHING TAGS   
===================================================================

Be default, the git push command doesn't transfer tags to remote servers. If we have a lot of tags that we want to push up at once, we can use the --tags option to the git push command. This will transfer all of our tags to the remote server that are not already there. 

       git push --tags   => this will push all tags
         
           or we can just push one tag:
    
       git push <tagname>
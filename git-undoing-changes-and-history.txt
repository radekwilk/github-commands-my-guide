                                UNDOING CHNAGES AND HISTORY
=========================================================================


                                CHECKOUT
=========================================================================
The git checkout command is like a Git Swiss Army knife. Many developers think it's overloaded, which is what lead to the addition to the git switch and git restore commands.

We can use checkout to create branches, switch to new branches, restore files and undo history.

Examples:

git checkout commit <commit-hash>  -> this will allow us to view commit with <commit-hash>

We can use git log command to view commit hashes. We just need the first 7 digits of a commit hashes.

Please do not pannic when you see this message:
Note: switching to '3e9124c'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 3e9124c update stash commands


to get back to the branch, we can use git switch <branch-name> to be back to normal state of the HEAD.

                                DETACHED HEAD
=========================================================================
We do not need to panic when this happens! It is not a bad thing.

We have a couple of options:
1. Stay in detached HEAD to examine the contentof the old commit. Poke around, view the files, etc.
2. Leave and go back to wherever we were before - reattach the HEAD
3. Create a new branch and switch to it. We can now make and save changes, since HEAD is no longer detached. 


                                CHECKOUT HEAD~
=========================================================================
git checkout supports a slightly odd syntax for referencing previous commits relative to a particular commit.

HEAD~1 refers to the commit before HEAD (parent)
HEAD~2 refers to 2 commits before HEAD (grandparent) and so on...., for example:

git checkout HEAD~1
     or
git checkout HEAD~2


                                DISCARDING CHANGES
=========================================================================
Suppose we've made some changes to a file but don't want to keep them. To revert the file back to whatever it looked like when we last commited, we can use:

git checkout HEAD <filename>  -> it will discard any changes in then file, reverting back to the HEAD

or we can use another command doing the same thing:
git checkout -- <filename>


                                RESTORE
=========================================================================

git restore  -> it is a brand new Git command that helps with undoing operations.

Beacuse it is so new, most of the existing Git tutorials and books do not mention it, but it is worth knowing.

Recall that git checkout does a million different things, which many git users find very confusing. git restore was introduced alongside git switch as alternatives to some of the uses of checkout.

                                Unmodifying files with RESTORE
=========================================================================
Suppose we've made some chnages t oa file since our last commit. We've saved the file but then realize we definetely do NOT want those changes anymore!

To restore the file to the contents in the HEAD, use git restore <file-name>  =>!!! This is 'undoable' command. If we have uncommited changes in the file , they will be lost.

git restore <file-name> restores using HEAD as the default source, but we can change that using the --source option.

For example, git restore --source HEAD~1 <file-name> will restore the contents of file-name to its state from the commit prior to HEAD. You can also use a particular commit hash as the source.

git restore --source HEAD~2 <file-name>  -> two commits prior to HEAD, and so on...


                                UNSTAGING FILES WITH RESTORE
=========================================================================

If we have accidently added a file to our staging area with git add and we don't wish to include it in the next commit, we can use git restore to remove it from staging. We can use --staged option like this:

git restore --staged <file-name>

                                    GIT RESET
=========================================================================
Suppose we've just made a couple of commits on the master branch, but we actually meant to make them on separate branch instead. To undo these commits, we can use git reset.

git reset <commit-hash>  -> this will reset the repo back to a specific commit. The commits are gone. 


                                    GIT RESET --HARD
=========================================================================
If we want to undo both the commits and the actual chnages in our files, we can use the --hard option.
for example, git reset --hard HEAD~1 will delate the last commit and associated changes.

git reset --hard <commit>





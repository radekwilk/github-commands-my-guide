                                UNDOING CHNAGES AND HISTORY
=========================================================================


                                CHECKOUT
=========================================================================
The git checkout command is like a Git Swiss Army knife. Many developers think it's overloaded, which is what lead to the addition to the git switch and git restore commands.

We can use checkout to create branches, switch to new branches, restore files and undo history.

Examples:

git checkout commit <commit-hash>  -> this will allow us to view commit with <commit-hash>

We can use git log command to view commit hashes. We just need the first 7 digits of a commit hashes.

Please do not pannic when you see this message:
Note: switching to '3e9124c'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 3e9124c update stash commands


to get back to the branch, we can use git switch <branch-name> to be back to normal state of the HEAD.

                                DETACHED HEAD
=========================================================================
We do not need to panic when this happens! It is not a bad thing.

We have a couple of options:
1. Stay in detached HEAD to examine the contentof the old commit. Poke around, view the files, etc.
2. Leave and go back to wherever we were before - reattach the HEAD
3. Create a new branch and switch to it. We can now make and save changes, since HEAD is no longer detached. 


                                CHECKOUT HEAD~
=========================================================================
git checkout supports a slightly odd syntax for referencing previous commits relative to a particular commit.

HEAD~1 refers to the commit before HEAD (parent)
HEAD~2 refers to 2 commits before HEAD (grandparent) and so on...., for example:

git checkout HEAD~1
     or
git checkout HEAD~2


                                DISCARDING CHANGES
=========================================================================
Suppose we've made some changes to a file but don't want to keep them. To revert the file back to whatever it looked like when we last commited, we can use:

git checkout HEAD <filename>  -> it will discard any changes in then file, reverting back to the HEAD





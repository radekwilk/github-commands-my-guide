                            CLONING
============================================================
So far we've created our own Git repositories from scratch, but often we want to get a local copy of an existing repository instead.

To do this, we can clone a remote repository hosted on Github or similar websites. All we need is a URL that we can tell Git to close for use.

To clone the repo, simply run git clone <url>

git clone <url>  -> Git will retrive all the files associated with the repository and will copy them to our local machine.

In addition, Git initializes a new repository on our machine, giving us access to the full Git history of the cloned project.

                            ADDING SSH KEY
============================================================
Follow Github docs to do so


                            Viewing remote
============================================================
To view any existing remotes for our repository, we can run git remote or git remote -v (verbose, for more info)

This just dsiplays a list of remotes. If we haven't added any remotes yes, we will not see anything

                        OPTION 1 - Existing Repo
============================================================
If we already have an exisiting repo locally that we want to get on Github...
1. Create a new repo on Github
2. Connect our local repo (add a remote)
3. Push up our changes to Github


                            Adding a New Remote
============================================================
A remote is really two things: a URL and a label. To add a new remote, we need to provide both to Git

git remote <name> <url>  => git remote add origin <url>


                            ORIGIN
============================================================
Origin is a conventional Git remote name, but it is not at all special. It's just a name for a URL.

When we clone a Github repo, the default remote name setup for us is called origin. We can change it. Most peaople just leave it.


                            OTHER COMMANDS
============================================================

git remote rename <old name><new name>

git remote remove <name>

                            PUSHING
============================================================
Now that we have a remote set up, let's push some work up to Github! To do this, we need to use the git push command.

We need to specify the remote we want to push up to AND the specific local branch we want to push up to that remote.

git push <remote> <branch>

popular command is like this:
git push origin master  -> it tells git to push up the master branch to our origin remote.

                            THE -U OPTION
============================================================

git push -u origin master    -> the -u option allows us to set the upstream of the branch we're pushing. We can think of this as a link connecting our local branch to a branch on Github...

Running git push -u origin master sets the upstream of the local mster branch so that it tracks the master branch on the origin repo.

....and that means when we use:  git push -u origin master 

           Next push...

    we can just use git push


Once we've set the upstream for a branch, we can use the git push shorthand which will push our current branch to the upstream. 


                            PUSH in DETAILS
============================================================
While we often want to push a local branch up to a remote branch of the same name, we do not have to! To push our local pankace branch up to a remote branch called waffle we could do:
git push origin pancake:waffle


                            Change master branch to main
============================================================
git branch -M main   -> it will change master branch to main
       or
git branch -M master   -> it will change main branch to master


                            OPTION 2 - Start from scratch
============================================================
If we haven't begun work on our local repo, we can ...
1. Create a brand new repo on Github
2. Clone it down to our machine
3. Do some work locally
3. Push up our changes to Github


                            REMOTE BRANCHES
============================================================
git branch -r  -> this will allow view remote branches our local repository knows about.

If we want to switch to remote branch and it is not on our local repo, we can use switch:
git switch name_of_branch
    or old way:
git checkout --track origin/branch_name
    
                            SWITCHING TO RMOTE BRANCH
============================================================
git switch origin/master   -> will switch branch to our branch in Github repo.

git 

                                   GIT FETCH
============================================================
FETCHING - Fetching allows us to download chnages from a remote repository, BUT those changes will not be automatically integrated into our working files.

It lets us to see what others have been working on, without having to merge those chnages into our local repo.
Think of it as "please go and get the latest information from Github, but don't screw up my working directory".


git fetch <remote> (origin is default so if we use just git fetch it will work) command fetches branches and history from a specific remote repository. It only updates remote tracking branches. 

git fetch origin would fetch all changes from the origin remote repository.

We can also fetch a specific branch from a remote using :
git fetch <remote><branch>

For example, git fetch origin master would retrive the latest information from the master branch on the origin remote repository.

SO now have all that changes on my local machine, but if I would like to see them I have to checkout origin/master. My master branch is untached. 


                                   GIT PULL
============================================================

git pull is another command we can use to retrive changes from a remote repository. Unlike fetch, pull actually updates our HEAD branch with whatever changes are retrived from the remote.

"go and download data from Github AND immediately update my local repo with those changes"

We can this of git pull as :

git pull  = git fetch(update the remote tracking branch with the latest changes from the remote repository) + git merge(update mu current branch with whatever changes are on the remote tracking branch)

git pull -> to pull, we specify the particular remote and branch we want to pull using git pull <remote><branch>. Just like with git merge, it matters WHERE we run this command from. Whatever branch we run it from is where the changes will be merged into.

git pull origin master would fetch the latest information from the origin's master branch and merge those changes into our current branch.

PULLS CAN RESULt IN MERGE CONFLICTS!!!

If we run git pull witout specifying a particular remote or branch to pull from, git assumes the following:
 - remote will default to origin;
 - branch will default to whatever tracking connection is configured for your current branch.

 Note: this behaviour can be configured, and tracking connections can be changed manually. Most people don't mess with that stuff. 


                             ADDING COLLABORATORS
============================================================

We can add Collaboarators to our repositories. We need to go to the repository settings and then to the Manage Access option.


                                   READMEs
============================================================

A README file is used to communicate important information about a repository including:
  - what the project does;
  - How to run the project;
  - Why it's noteworthy;
  - Who maintains the project;

README are Markdown files, ending with the .md extension. Markdown is a convinient syntax to generate formatted text. It's easy to pick up.



                    CONTEXT
===================================================

On large projects, we often work in multiple contexts:
    1. We're working on 2 different color scheme variations for our website at the same time, unsure of which we like best.

    2. We're also trying to fix a horrible bug, but it's proving tough to solve. We need to really hunt around and toggle some code on and off to figure it out.

    3. A teammate is also working on adding a new chat widget to present at the next meeting. It's unclear if our company will be using it.

    4. Another coworker is updating the search bar autocomplete.

    5. Another developer is doing an experimental radical design overhaul of the entire layout to present next month.

                    BRANCHES 
=========================================================

Branches are alternative timelines for a project.

They enable us to create separate context where we can try new things, or even work on multiple ideas in parallel

I we make changes on one branch, they do not impact the other branches (unless we merge the changes)

                    VIEWING BRANCHES
============================================================

Use git branch t view your existing branches. The default branch in every git repo is master, though we can configure it.
Current branch always will have * next to it

git branch  -> this will show us all branches in our repo
git branch -v   -> this will show us all branches in our repo, with latest commint info
git branch -r   -> this will show us all remote branches

                    CREATING BRANCHES
================================================================

Use git branch <branch-name> to make a new branch based on upon the current HEAD

This just crates the branch. It does not switch you to that branch (the HEAD stays the same)


                    SWITCHING BRANCHES - Using SWITCH command
===================================================================

Once we have created a new branch, use git switch <branch-name> to switch to it

git switch <branch-name>    -> it will switch to new branch


                    SWITCHING BRANCHES - Using CHECKOUT command
===================================================================

Historically, we used git checkout <branch-name> to switch branches. This still works.

The checkout command does a milliion additional things, so the decision was made to add a standalone switch command which is much simpler.


                                CREATE AND SWITCH
==================================================================================

Use git switch with a -c flag to create a new branch AND switch to it all in one gitignore.io

git switch -c <branch-name>    -> it will create new branch and switch to it

or we can do it the old way:

git checkout -b <branch-name>   -> it will create new branch and checkout to it

                                DELATE A BRANCH
==================================================================================

git branch -d <branch-name>    -> it will attempt to delate the branch. We can not be on that branch to delate it and it has to be merged to be able to delate it.

git branch -D <branch-name>   -> it will detale the branch even if not merged. It is equivalent of commmand git branch -d -f  <branch-name> (or git --delate --force)

                                RENAME A BRANCH
==================================================================================

git branch -m (or git branch --move)   -> to be able to rename the branch, we have to switch (be in the branch we want to rename) to the branch which we want to rename.


                                MERGING
==================================================================================

The merge command can be consfusing sometimes. Things to remember:
   - we merge branches, not specific commits
   - we alays merge to the current HEAD branch

To merge, follow these basic steps:
1. Switch to or checkout the branch we want to merge to changes into (the receiving branch)
2. Use the git merge command to merge changes from a specific branch into the current branch.

    - git switch master
    - git merge <branch-to-merge>

                                RESOLVING MERGING CONFLICTS
==================================================================================

Whenever we encounter merge conflicts. The content from the branch you traying to merge from is displayed between the ========== and >>>>>>>>> symbols. Follow these steps to resolve them:

1. Open up the file(s) with merge conflicts
2. Edit the file(s) to remove the conflicts. Decide which branch's content you want to keep in each conflict. Or keep the content from branch.
3. Remove the conflict "markers" in the document
4. Add your changes and then make a commit